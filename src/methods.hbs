

export interface {{this.ModuleName}}Type {
{{#each methods}}
    {{this.name}}: ({{#generateMethodSignature this.inputObjects this.outputObject}}{{/generateMethodSignature}}) => void;
{{/each}}
}

const resolveQueryParams = (params: any[], runAs? : string) => {
    const retObject = {trcRequestDate: new Date().toISOString(), trcUUID: generateUUID(), runAs: runAs !== undefined ? runAs : null};
    params.forEach(item=>{
      Object.keys(item).forEach(key=>{
         // @ts-ignore
         retObject[key] = item[key];
      });
    });

    return retObject;
}

const generateUUID = () => {
return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
var r = Math.random() * 16 | 0,
v = c === 'x' ? r : (r & 0x3 | 0x8);
return v.toString(16);
});
}

interface Error {
  message: string;
  name: string;
  stack: string;
  config: {
    url: string;
    method: string;
    data: string;
    headers: { [key: string]: string };
  };
}

interface Callbacks {
    onError?: (error: Error) => void;
    onConflict?: (conflictInfo: any) => void;
    onValidationFailed?: (originalResponse: any) => void;
    onEntityNotFound?: (originalResponse: any) => void;
    onAdditionalAction?: (additionalAction: any) => void;
}

const hasAdditionalAction = (response: AxiosResponse) => {
  if (response.status >= 200 && response.status < 300 && response.data.errorType === "ADDITIONAL_ACTION") {
    return true;
  }
  return false;
}

const isSuccess = (response: AxiosResponse) => {
return response.status >= 200 && response.status < 300 && response.data.errorType === null
}

const isConflict = (response: AxiosResponse) => {
if (response.status >= 200 && response.status < 300 && response.data.errorType === "CONFLICT") {
return true;
}
return false;
}

const entityNotFound = (response: AxiosResponse) => {
    if (response.status == 204) {
    return true;
    }
    return false;
}

const validationFailed = (response: AxiosResponse) => {
    if (response.status == 200 && response.data.errorType === "VALIDATION") {
    return true;
    }
    return false;
}

export const {{this.moduleName}}Generator = (
backendUrl: string,
i18n: any,
handleError: (methodName : string, error: Error, payload? : any) => any,
getIdTokenClaims: (options?: any) => Promise<IdToken>,
    runAs: string,
    ): {{this.ModuleName}}Type => {

  const apiMethods = {
    {{#each methods}}
        {{this.name}}: ({{#generateMethodSignatureImpl this.inputObjects this.outputObject}}{{/generateMethodSignatureImpl}}):void => {
        {{#unless this.isPublic}}
            if (hashAuthentication) {
            console.log(`Sending {{this.method}} -> ${backendUrl}{{#prepareURI this.uri}}{{/prepareURI}}, with data: ${JSON.stringify({{#printDataOfPresentOrEmpty this.inputObjects this.method}}{{/printDataOfPresentOrEmpty}})}`);
            axios
            .{{this.method}}(`${backendUrl}{{#prepareURI this.uri}}{{/prepareURI}}`, {{#generateDataIfPresent this.inputObjects this.method}}{{/generateDataIfPresent}} {
            headers: {
            'Accept-Language': i18n.language,
            {{#unless this.isPublic}} Authorization: `Hash ${hashAuthentication}`,  {{/unless}}
            },
            params: resolveQueryParams({{#addPageParamsIfPresent this.inputObjects}}{{/addPageParamsIfPresent}}, runAs),
            paramsSerializer: (params: Record<string, any>, options?: ParamsSerializerOptions) => {
                return qs.stringify(params, {arrayFormat: 'repeat'})
            },

            })
            .then((response) => {
                if (isSuccess(response)) {
                   // @ts-ignore
                   onSuccess(response.data.payload);

                }
                if (hasAdditionalAction(response)) {
                    if (typeof callbacks.onAdditionalAction === 'function') {
                        callbacks.onAdditionalAction(response.data.payload);
                    }
                }

                if (isConflict(response)) {
                    if (typeof callbacks.onConflict === 'function') {
                        callbacks.onConflict(response.data.payload.entity);
                    }
                }
                if (validationFailed(response)) {
                    if (typeof callbacks.onValidationFailed === 'function') {
                        callbacks.onValidationFailed(response.data.messages);
                    }
                }

                if (entityNotFound(response)) {
                    if (typeof callbacks.onEntityNotFound === 'function') {
                        callbacks.onEntityNotFound(response.data.payload);
                    }
                }
                 
            })
            .catch((error)=>{
                if (typeof callbacks.onError === 'function') {
                    callbacks.onError(error);
                } else
                handleError('{{this.name}}', error, {{#printDataOfPresentOrEmpty this.inputObjects this.method}}{{/printDataOfPresentOrEmpty}});
                 
            })
            } else
            getIdTokenClaims().then((res) => { {{/unless}}
            console.log(`Sending {{this.method}} -> ${backendUrl}{{#prepareURI this.uri}}{{/prepareURI}}, with data: ${JSON.stringify({{#printDataOfPresentOrEmpty this.inputObjects this.method}}{{/printDataOfPresentOrEmpty}})}`);
             
            axios
                .{{this.method}}(`${backendUrl}{{#prepareURI this.uri}}{{/prepareURI}}`, {{#generateDataIfPresent this.inputObjects this.method}}{{/generateDataIfPresent}} {
                    headers: {
                    'Accept-Language': i18n.language,
        {{#unless this.isPublic}} Authorization: `Bearer ${res?.__raw}`,  {{/unless}}
                    },
                    params: resolveQueryParams({{#addPageParamsIfPresent this.inputObjects}}{{/addPageParamsIfPresent}}, runAs),
                    paramsSerializer: (params: Record<string, any>, options?: ParamsSerializerOptions) => {
                        return qs.stringify(params, {arrayFormat: 'repeat'})
                    },
                })
                .then((response) => {
                    if (isSuccess(response)) {
                        // @ts-ignore
                        onSuccess(response.data.payload);
                        }
                    if (hasAdditionalAction(response)) {
                        if (typeof callbacks.onAdditionalAction === 'function') {
                            callbacks.onAdditionalAction(response.data.payload);
                        }
                    }

                    if (isConflict(response)) {
                        if (typeof callbacks.onConflict === 'function') {
                            callbacks.onConflict(response.data.payload.entity);
                        }
                    }
                    if (validationFailed(response)) {
                        if (typeof callbacks.onValidationFailed === 'function') {
                         callbacks.onValidationFailed(response.data.messages);
                        }
                    }

                    if (entityNotFound(response)) {
                        if (typeof callbacks.onEntityNotFound === 'function') {
                            callbacks.onEntityNotFound(response.data.payload);
                        }
                    }
                     
                })
                .catch((error)=>{
                    if (typeof callbacks.onError === 'function') {
                        callbacks.onError(error);
                    } else
                    handleError('{{this.name}}', error, {{#printDataOfPresentOrEmpty this.inputObjects this.method}}{{/printDataOfPresentOrEmpty}});
                     
                })
        {{#unless this.isPublic}} }); {{/unless}}
        },
    {{/each}}
  };

    return apiMethods;

};
